name: Build_x86_64

# Add a button to trigger the workflow
on: 
  repository_dispatch:
  workflow_dispatch:

env:
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        TZ: Asia/Shanghai
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/LeeHe-gif/lede-/refs/heads/main/depend_lede)
        sudo -E systemctl daemon-reload
        #sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "${TZ}"
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        
    - name: Update feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
   
    - name: Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds install -a

    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc) V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the OpenWrt
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make V=s -j$(nproc) | tee log.txt
        df -h
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success' 
      run: |
        cd openwrt
        cp log.txt bin/targets/*/*
        cd bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
      if: steps.compile.outputs.status != 'success'
      run: |
        echo "status=failed" >> $GITHUB_OUTPUT        

    - name: Upload artifact
      id: artifact
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
 
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo -e "##### OpenWrt 固件信息 \n- 使用lede的源码 \n- 默认网关: 192.168.10.1 \n- 默认用户: root \n- 默认密码: password \n- 已装插件:-luci-app-accesscontrol=y \n \t-luci-app-adbyby-plus=y \n \t-luci-app-adguardhome=y \n \t-luci-app-airplay2=y \n \t-luci-app-alist=y \n \t-luci-app-argon-config=y \n \t-luci-app-aria2=y \n \t-luci-app-autoreboot=y \n \t-luci-app-commands=y \n \t-luci-app-ddns=y \n \t-luci-app-diskman=y \n \t-luci-app-dockerman=y \n \t-luci-app-filebrowser=y \n \t-luci-app-filetransfer=y \n \t-luci-app-firewall=y \n \t-luci-app-hd-idle=y \n \t-luci-app-minidlna=y \n \t-luci-app-mwan3=y \n \t-luci-app-nlbwmon=y \n \t-luci-app-onliner=y \n \t-luci-app-openclash=y \n \t-luci-app-poweroff=y \n \t-luci-app-pptp-server=y \n \t-luci-app-pushbot=y \n \t-luci-app-qbittorrent=y \n \t-luci-app-samba4=y \n \t-luci-app-serverchan=y \n \t-luci-app-ttyd=y \n \t-luci-app-turboacc=y \n \t-luci-app-upnp=y \n \t-luci-app-v2ray-server=y \n \t-luci-app-wol=y \n \t-luci-app-wrtbwmon=y \n \t" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
      if: steps.organize.outputs.status == 'failed'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT       
        touch release.txt
        echo "编译失败，请查看log.txt编译日志" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: LeeHe-gif/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
        token: ${{ secrets.GITHUB_TOKEN }}
